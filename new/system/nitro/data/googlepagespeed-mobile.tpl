{
 "kind": "pagespeedonline#result",
 "id": "https://www.ornatejewels.com/",
 "responseCode": 200,
 "title": "Silver Jewelry | Buy Gold Plated and Silver Jewelry Online India",
 "score": 64,
 "pageStats": {
  "numberResources": 66,
  "numberHosts": 2,
  "totalRequestBytes": "5995",
  "numberStaticResources": 49,
  "htmlResponseBytes": "61576",
  "imageResponseBytes": "1697699",
  "javascriptResponseBytes": "431785",
  "otherResponseBytes": "894915",
  "numberJsResources": 11
 },
 "formattedResults": {
  "locale": "en_US",
  "ruleResults": {
   "AvoidLandingPageRedirects": {
    "localizedRuleName": "Avoid landing page redirects",
    "ruleImpact": 0.0,
    "urlBlocks": [
     {
      "header": {
       "format": "Your page has no redirects. Learn more about avoiding landing page redirects.",
       "args": [
        {
         "type": "HYPERLINK",
         "value": "https://developers.google.com/speed/docs/insights/AvoidRedirects"
        }
       ]
      }
     }
    ]
   },
   "AvoidPlugins": {
    "localizedRuleName": "Avoid plugins",
    "ruleImpact": 0.0,
    "urlBlocks": [
     {
      "header": {
       "format": "Your page does not appear to use plugins, which would prevent content from being usable on many platforms. Learn more about the importance of avoiding plugins.",
       "args": [
        {
         "type": "HYPERLINK",
         "value": "https://developers.google.com/speed/docs/insights/AvoidPlugins"
        }
       ]
      }
     }
    ]
   },
   "ConfigureViewport": {
    "localizedRuleName": "Configure the viewport",
    "ruleImpact": 0.0,
    "urlBlocks": [
     {
      "header": {
       "format": "Your page specifies a viewport matching the device's size, which allows it to render properly on all devices. Learn more about configuring viewports.",
       "args": [
        {
         "type": "HYPERLINK",
         "value": "https://developers.google.com/speed/docs/insights/ConfigureViewport"
        }
       ]
      }
     }
    ]
   },
   "EnableGzipCompression": {
    "localizedRuleName": "Enable compression",
    "ruleImpact": 0.0,
    "urlBlocks": [
     {
      "header": {
       "format": "You have compression enabled. Learn more about enabling compression.",
       "args": [
        {
         "type": "HYPERLINK",
         "value": "https://developers.google.com/speed/docs/insights/EnableCompression"
        }
       ]
      }
     }
    ]
   },
   "LeverageBrowserCaching": {
    "localizedRuleName": "Leverage browser caching",
    "ruleImpact": 0.0,
    "urlBlocks": [
     {
      "header": {
       "format": "You have enabled browser caching. Learn more about browser caching recommendations.",
       "args": [
        {
         "type": "HYPERLINK",
         "value": "https://developers.google.com/speed/docs/insights/LeverageBrowserCaching"
        }
       ]
      }
     }
    ]
   },
   "MainResourceServerResponseTime": {
    "localizedRuleName": "Reduce server response time",
    "ruleImpact": 0.735,
    "urlBlocks": [
     {
      "header": {
       "format": "In our test, your server responded in $1. There are many factors that can slow down your server response time. Please read our recommendations to learn how you can monitor and measure where your server is spending the most time.",
       "args": [
        {
         "type": "DURATION",
         "value": "0.25 seconds"
        },
        {
         "type": "HYPERLINK",
         "value": "https://developers.google.com/speed/docs/insights/Server"
        }
       ]
      }
     }
    ]
   },
   "MinifyCss": {
    "localizedRuleName": "Minify CSS",
    "ruleImpact": 0.0,
    "urlBlocks": [
     {
      "header": {
       "format": "Your CSS is minified. Learn more about minifying CSS.",
       "args": [
        {
         "type": "HYPERLINK",
         "value": "https://developers.google.com/speed/docs/insights/MinifyResources"
        }
       ]
      }
     }
    ]
   },
   "MinifyHTML": {
    "localizedRuleName": "Minify HTML",
    "ruleImpact": 0.0,
    "urlBlocks": [
     {
      "header": {
       "format": "Your HTML is minified. Learn more about minifying HTML.",
       "args": [
        {
         "type": "HYPERLINK",
         "value": "https://developers.google.com/speed/docs/insights/MinifyResources"
        }
       ]
      }
     }
    ]
   },
   "MinifyJavaScript": {
    "localizedRuleName": "Minify JavaScript",
    "ruleImpact": 0.0,
    "urlBlocks": [
     {
      "header": {
       "format": "Your JavaScript content is minified. Learn more about minifying JavaScript.",
       "args": [
        {
         "type": "HYPERLINK",
         "value": "https://developers.google.com/speed/docs/insights/MinifyResources"
        }
       ]
      }
     }
    ]
   },
   "MinimizeRenderBlockingResources": {
    "localizedRuleName": "Eliminate render-blocking JavaScript and CSS in above-the-fold content",
    "ruleImpact": 0.0,
    "urlBlocks": [
     {
      "header": {
       "format": "You have no render-blocking resources. Learn more about removing render-blocking resources.",
       "args": [
        {
         "type": "HYPERLINK",
         "value": "https://developers.google.com/speed/docs/insights/BlockingJS"
        }
       ]
      }
     }
    ]
   },
   "OptimizeImages": {
    "localizedRuleName": "Optimize images",
    "ruleImpact": 57.263600000000004,
    "urlBlocks": [
     {
      "header": {
       "format": "Properly formatting and compressing images can save many bytes of data."
      }
     },
     {
      "header": {
       "format": "Optimize the following images to reduce their size by $2 ($3 reduction).",
       "args": [
        {
         "type": "HYPERLINK",
         "value": "https://developers.google.com/speed/docs/insights/OptimizeImages"
        },
        {
         "type": "BYTES",
         "value": "559.2KiB"
        },
        {
         "type": "PERCENTAGE",
         "value": "56%"
        }
       ]
      },
      "urls": [
       {
        "result": {
         "format": "Compressing $1 could save $2 ($3 reduction).",
         "args": [
          {
           "type": "URL",
           "value": "https://www.ornatejewels.com/image/catalog/testimonials/webp/karishma-singh.webp"
          },
          {
           "type": "BYTES",
           "value": "51KiB"
          },
          {
           "type": "PERCENTAGE",
           "value": "69%"
          }
         ]
        }
       },
       {
        "result": {
         "format": "Compressing $1 could save $2 ($3 reduction).",
         "args": [
          {
           "type": "URL",
           "value": "https://www.ornatejewels.com/images/blog-webp/aashana.webp"
          },
          {
           "type": "BYTES",
           "value": "43.1KiB"
          },
          {
           "type": "PERCENTAGE",
           "value": "75%"
          }
         ]
        }
       },
       {
        "result": {
         "format": "Compressing $1 could save $2 ($3 reduction).",
         "args": [
          {
           "type": "URL",
           "value": "https://www.ornatejewels.com/image/catalog/testimonials/webp/kaveeta-pole.webp"
          },
          {
           "type": "BYTES",
           "value": "39.6KiB"
          },
          {
           "type": "PERCENTAGE",
           "value": "76%"
          }
         ]
        }
       },
       {
        "result": {
         "format": "Compressing $1 could save $2 ($3 reduction).",
         "args": [
          {
           "type": "URL",
           "value": "https://www.ornatejewels.com/image/catalog/testimonials/webp/Karishma-Arolkar.webp"
          },
          {
           "type": "BYTES",
           "value": "39KiB"
          },
          {
           "type": "PERCENTAGE",
           "value": "65%"
          }
         ]
        }
       },
       {
        "result": {
         "format": "Compressing $1 could save $2 ($3 reduction).",
         "args": [
          {
           "type": "URL",
           "value": "https://www.ornatejewels.com/image/catalog/testimonials/Rashmi-Grover-,-Delhi-.webp"
          },
          {
           "type": "BYTES",
           "value": "34.9KiB"
          },
          {
           "type": "PERCENTAGE",
           "value": "69%"
          }
         ]
        }
       },
       {
        "result": {
         "format": "Compressing $1 could save $2 ($3 reduction).",
         "args": [
          {
           "type": "URL",
           "value": "https://www.ornatejewels.com/image/catalog/testimonials/webp/Badal-Subba.webp"
          },
          {
           "type": "BYTES",
           "value": "33.6KiB"
          },
          {
           "type": "PERCENTAGE",
           "value": "70%"
          }
         ]
        }
       },
       {
        "result": {
         "format": "Compressing $1 could save $2 ($3 reduction).",
         "args": [
          {
           "type": "URL",
           "value": "https://www.ornatejewels.com/image/catalog/testimonials/webp/Pooja-Ahuja,-Chandigarh.webp"
          },
          {
           "type": "BYTES",
           "value": "32.3KiB"
          },
          {
           "type": "PERCENTAGE",
           "value": "70%"
          }
         ]
        }
       },
       {
        "result": {
         "format": "Compressing $1 could save $2 ($3 reduction).",
         "args": [
          {
           "type": "URL",
           "value": "https://www.ornatejewels.com/image/catalog/testimonials/webp/monica-muthulakshmi.webp"
          },
          {
           "type": "BYTES",
           "value": "31.8KiB"
          },
          {
           "type": "PERCENTAGE",
           "value": "69%"
          }
         ]
        }
       },
       {
        "result": {
         "format": "Compressing $1 could save $2 ($3 reduction).",
         "args": [
          {
           "type": "URL",
           "value": "https://www.ornatejewels.com/image/cache/catalog/category-banner/earrings-banner-391x269.webp"
          },
          {
           "type": "BYTES",
           "value": "31.6KiB"
          },
          {
           "type": "PERCENTAGE",
           "value": "74%"
          }
         ]
        }
       },
       {
        "result": {
         "format": "Compressing $1 could save $2 ($3 reduction).",
         "args": [
          {
           "type": "URL",
           "value": "https://www.ornatejewels.com/image/catalog/testimonials/webp/Jaspreet-Kaur.webp"
          },
          {
           "type": "BYTES",
           "value": "27.5KiB"
          },
          {
           "type": "PERCENTAGE",
           "value": "69%"
          }
         ]
        }
       },
       {
        "result": {
         "format": "Compressing $1 could save $2 ($3 reduction).",
         "args": [
          {
           "type": "URL",
           "value": "https://www.ornatejewels.com/image/cache/catalog/banner/signup-1449x503.jpg"
          },
          {
           "type": "BYTES",
           "value": "25.1KiB"
          },
          {
           "type": "PERCENTAGE",
           "value": "18%"
          }
         ]
        }
       },
       {
        "result": {
         "format": "Compressing $1 could save $2 ($3 reduction).",
         "args": [
          {
           "type": "URL",
           "value": "https://www.ornatejewels.com/image/catalog/testimonials/webp/kamal-hira.webp"
          },
          {
           "type": "BYTES",
           "value": "22.9KiB"
          },
          {
           "type": "PERCENTAGE",
           "value": "68%"
          }
         ]
        }
       },
       {
        "result": {
         "format": "Compressing $1 could save $2 ($3 reduction).",
         "args": [
          {
           "type": "URL",
           "value": "https://www.ornatejewels.com/images/webp/news-video.webp"
          },
          {
           "type": "BYTES",
           "value": "22.9KiB"
          },
          {
           "type": "PERCENTAGE",
           "value": "69%"
          }
         ]
        }
       },
       {
        "result": {
         "format": "Compressing $1 could save $2 ($3 reduction).",
         "args": [
          {
           "type": "URL",
           "value": "https://www.ornatejewels.com/image/catalog/testimonials/webp/Abhay-Pandey.webp"
          },
          {
           "type": "BYTES",
           "value": "22.6KiB"
          },
          {
           "type": "PERCENTAGE",
           "value": "69%"
          }
         ]
        }
       },
       {
        "result": {
         "format": "Compressing $1 could save $2 ($3 reduction).",
         "args": [
          {
           "type": "URL",
           "value": "https://www.ornatejewels.com/images/webp/news-video1.webp"
          },
          {
           "type": "BYTES",
           "value": "22.1KiB"
          },
          {
           "type": "PERCENTAGE",
           "value": "68%"
          }
         ]
        }
       },
       {
        "result": {
         "format": "Compressing $1 could save $2 ($3 reduction).",
         "args": [
          {
           "type": "URL",
           "value": "https://www.ornatejewels.com/images/blog-webp/BR.webp"
          },
          {
           "type": "BYTES",
           "value": "21KiB"
          },
          {
           "type": "PERCENTAGE",
           "value": "87%"
          }
         ]
        }
       },
       {
        "result": {
         "format": "Compressing $1 could save $2 ($3 reduction).",
         "args": [
          {
           "type": "URL",
           "value": "https://www.ornatejewels.com/image/cache/catalog/category-banner/collections-banner-391x269.webp"
          },
          {
           "type": "BYTES",
           "value": "20KiB"
          },
          {
           "type": "PERCENTAGE",
           "value": "69%"
          }
         ]
        }
       },
       {
        "result": {
         "format": "Compressing $1 could save $2 ($3 reduction).",
         "args": [
          {
           "type": "URL",
           "value": "https://www.ornatejewels.com/image/cache/catalog/category-banner/rings-banner-391x269.webp"
          },
          {
           "type": "BYTES",
           "value": "15.5KiB"
          },
          {
           "type": "PERCENTAGE",
           "value": "66%"
          }
         ]
        }
       },
       {
        "result": {
         "format": "Compressing $1 could save $2 ($3 reduction).",
         "args": [
          {
           "type": "URL",
           "value": "https://www.ornatejewels.com/image/catalog/testimonials/webp/1499072809OJE5011AQ.webp"
          },
          {
           "type": "BYTES",
           "value": "7.6KiB"
          },
          {
           "type": "PERCENTAGE",
           "value": "22%"
          }
         ]
        }
       },
       {
        "result": {
         "format": "Compressing $1 could save $2 ($3 reduction).",
         "args": [
          {
           "type": "URL",
           "value": "https://www.ornatejewels.com/images/webp/instgrame-gallery.webp"
          },
          {
           "type": "BYTES",
           "value": "4.9KiB"
          },
          {
           "type": "PERCENTAGE",
           "value": "13%"
          }
         ]
        }
       },
       {
        "result": {
         "format": "Compressing $1 could save $2 ($3 reduction).",
         "args": [
          {
           "type": "URL",
           "value": "https://www.ornatejewels.com/images/webp/thawte-security.webp"
          },
          {
           "type": "BYTES",
           "value": "3.8KiB"
          },
          {
           "type": "PERCENTAGE",
           "value": "67%"
          }
         ]
        }
       },
       {
        "result": {
         "format": "Compressing $1 could save $2 ($3 reduction).",
         "args": [
          {
           "type": "URL",
           "value": "https://www.ornatejewels.com/images/webp/facebook-gallery.webp"
          },
          {
           "type": "BYTES",
           "value": "3.5KiB"
          },
          {
           "type": "PERCENTAGE",
           "value": "11%"
          }
         ]
        }
       },
       {
        "result": {
         "format": "Compressing $1 could save $2 ($3 reduction).",
         "args": [
          {
           "type": "URL",
           "value": "https://www.ornatejewels.com/image/cache/catalog/category-banner/necklaces-391x269.webp"
          },
          {
           "type": "BYTES",
           "value": "3KiB"
          },
          {
           "type": "PERCENTAGE",
           "value": "25%"
          }
         ]
        }
       }
      ]
     }
    ]
   },
   "PrioritizeVisibleContent": {
    "localizedRuleName": "Prioritize visible content",
    "ruleImpact": 0.0,
    "urlBlocks": [
     {
      "header": {
       "format": "You have the above-the-fold content properly prioritized. Learn more about prioritizing visible content.",
       "args": [
        {
         "type": "HYPERLINK",
         "value": "https://developers.google.com/speed/docs/insights/PrioritizeVisibleContent"
        }
       ]
      }
     }
    ]
   },
   "SizeContentToViewport": {
    "localizedRuleName": "Size content to viewport",
    "ruleImpact": 0.0,
    "urlBlocks": [
     {
      "header": {
       "format": "The contents of your page fit within the viewport. Learn more about sizing content to the viewport.",
       "args": [
        {
         "type": "HYPERLINK",
         "value": "https://developers.google.com/speed/docs/insights/SizeContentToViewport"
        }
       ]
      }
     }
    ]
   },
   "SizeTapTargetsAppropriately": {
    "localizedRuleName": "Size tap targets appropriately",
    "ruleImpact": 4.21875,
    "urlBlocks": [
     {
      "header": {
       "format": "Some of the links/buttons on your webpage may be too small for a user to easily tap on a touchscreen. Consider making these tap targets larger to provide a better user experience.",
       "args": [
        {
         "type": "HYPERLINK",
         "value": "https://developers.google.com/speed/docs/insights/SizeTapTargetsAppropriately"
        }
       ]
      }
     },
     {
      "header": {
       "format": "The following tap targets are close to other nearby tap targets and may need additional spacing around them."
      },
      "urls": [
       {
        "result": {
         "format": "The tap target $1 and $2 others are close to other tap targets.",
         "args": [
          {
           "type": "STRING_LITERAL",
           "value": "\u003ca href=\"https://www.or…ring-video.mp4\" class=\"youtube\"\u003e\u003c/a\u003e"
          },
          {
           "type": "INT_LITERAL",
           "value": "5"
          }
         ]
        }
       },
       {
        "result": {
         "format": "The tap target $1 and $2 others are close to other tap targets.",
         "args": [
          {
           "type": "STRING_LITERAL",
           "value": "\u003ca href=\"about-us.html\"\u003eAbout us\u003c/a\u003e"
          },
          {
           "type": "INT_LITERAL",
           "value": "10"
          }
         ]
        }
       },
       {
        "result": {
         "format": "The tap target $1 is close to $2 other tap targets.",
         "args": [
          {
           "type": "STRING_LITERAL",
           "value": "\u003cbutton type=\"submit\"\u003e"
          },
          {
           "type": "INT_LITERAL",
           "value": "1"
          }
         ]
        }
       }
      ]
     }
    ]
   },
   "UseLegibleFontSizes": {
    "localizedRuleName": "Use legible font sizes",
    "ruleImpact": 0.0,
    "urlBlocks": [
     {
      "header": {
       "format": "The text on your page is legible. Learn more about using legible font sizes.",
       "args": [
        {
         "type": "HYPERLINK",
         "value": "https://developers.google.com/speed/docs/insights/UseLegibleFontSizes"
        }
       ]
      }
     }
    ]
   }
  }
 },
 "version": {
  "major": 1,
  "minor": 15
 }
}
